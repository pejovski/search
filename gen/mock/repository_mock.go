// Code generated by MockGen. DO NOT EDIT.
// Source: repository/repository.go

package mock

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/pejovski/search/model"
	scope "github.com/pejovski/search/pkg/scope"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return _m.recorder
}

// Product mocks base method
func (_m *MockRepository) Product(id string) (*model.Product, error) {
	ret := _m.ctrl.Call(_m, "Product", id)
	ret0, _ := ret[0].(*model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Product indicates an expected call of Product
func (_mr *MockRepositoryMockRecorder) Product(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Product", reflect.TypeOf((*MockRepository)(nil).Product), arg0)
}

// Products mocks base method
func (_m *MockRepository) Products(s *scope.Scope) ([]*model.Product, int, error) {
	ret := _m.ctrl.Call(_m, "Products", s)
	ret0, _ := ret[0].([]*model.Product)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Products indicates an expected call of Products
func (_mr *MockRepositoryMockRecorder) Products(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Products", reflect.TypeOf((*MockRepository)(nil).Products), arg0)
}

// Create mocks base method
func (_m *MockRepository) Create(p *model.Product) (string, error) {
	ret := _m.ctrl.Call(_m, "Create", p)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (_mr *MockRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), arg0)
}

// Delete mocks base method
func (_m *MockRepository) Delete(id string) error {
	ret := _m.ctrl.Call(_m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (_mr *MockRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), arg0)
}
