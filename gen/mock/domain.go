// Code generated by MockGen. DO NOT EDIT.
// Source: domain/domain.go

package mock

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/pejovski/search/model"
	scope "github.com/pejovski/search/scope"
	http "net/http"
	reflect "reflect"
)

// MockHttpHandler is a mock of HttpHandler interface
type MockHttpHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHttpHandlerMockRecorder
}

// MockHttpHandlerMockRecorder is the mock recorder for MockHttpHandler
type MockHttpHandlerMockRecorder struct {
	mock *MockHttpHandler
}

// NewMockHttpHandler creates a new mock instance
func NewMockHttpHandler(ctrl *gomock.Controller) *MockHttpHandler {
	mock := &MockHttpHandler{ctrl: ctrl}
	mock.recorder = &MockHttpHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockHttpHandler) EXPECT() *MockHttpHandlerMockRecorder {
	return _m.recorder
}

// Product mocks base method
func (_m *MockHttpHandler) Product() http.HandlerFunc {
	ret := _m.ctrl.Call(_m, "Product")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// Product indicates an expected call of Product
func (_mr *MockHttpHandlerMockRecorder) Product() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Product", reflect.TypeOf((*MockHttpHandler)(nil).Product))
}

// Products mocks base method
func (_m *MockHttpHandler) Products() http.HandlerFunc {
	ret := _m.ctrl.Call(_m, "Products")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// Products indicates an expected call of Products
func (_mr *MockHttpHandlerMockRecorder) Products() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Products", reflect.TypeOf((*MockHttpHandler)(nil).Products))
}

// CreateProduct mocks base method
func (_m *MockHttpHandler) CreateProduct() http.HandlerFunc {
	ret := _m.ctrl.Call(_m, "CreateProduct")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// CreateProduct indicates an expected call of CreateProduct
func (_mr *MockHttpHandlerMockRecorder) CreateProduct() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CreateProduct", reflect.TypeOf((*MockHttpHandler)(nil).CreateProduct))
}

// DeleteProduct mocks base method
func (_m *MockHttpHandler) DeleteProduct() http.HandlerFunc {
	ret := _m.ctrl.Call(_m, "DeleteProduct")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct
func (_mr *MockHttpHandlerMockRecorder) DeleteProduct() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DeleteProduct", reflect.TypeOf((*MockHttpHandler)(nil).DeleteProduct))
}

// MockSearchController is a mock of SearchController interface
type MockSearchController struct {
	ctrl     *gomock.Controller
	recorder *MockSearchControllerMockRecorder
}

// MockSearchControllerMockRecorder is the mock recorder for MockSearchController
type MockSearchControllerMockRecorder struct {
	mock *MockSearchController
}

// NewMockSearchController creates a new mock instance
func NewMockSearchController(ctrl *gomock.Controller) *MockSearchController {
	mock := &MockSearchController{ctrl: ctrl}
	mock.recorder = &MockSearchControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockSearchController) EXPECT() *MockSearchControllerMockRecorder {
	return _m.recorder
}

// GetProduct mocks base method
func (_m *MockSearchController) GetProduct(id string) (*model.Product, error) {
	ret := _m.ctrl.Call(_m, "GetProduct", id)
	ret0, _ := ret[0].(*model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct
func (_mr *MockSearchControllerMockRecorder) GetProduct(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetProduct", reflect.TypeOf((*MockSearchController)(nil).GetProduct), arg0)
}

// GetProducts mocks base method
func (_m *MockSearchController) GetProducts(s *scope.Scope) ([]*model.Product, int, error) {
	ret := _m.ctrl.Call(_m, "GetProducts", s)
	ret0, _ := ret[0].([]*model.Product)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProducts indicates an expected call of GetProducts
func (_mr *MockSearchControllerMockRecorder) GetProducts(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetProducts", reflect.TypeOf((*MockSearchController)(nil).GetProducts), arg0)
}

// CreateProduct mocks base method
func (_m *MockSearchController) CreateProduct(p *model.Product) (string, error) {
	ret := _m.ctrl.Call(_m, "CreateProduct", p)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct
func (_mr *MockSearchControllerMockRecorder) CreateProduct(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CreateProduct", reflect.TypeOf((*MockSearchController)(nil).CreateProduct), arg0)
}

// DeleteProduct mocks base method
func (_m *MockSearchController) DeleteProduct(id string) error {
	ret := _m.ctrl.Call(_m, "DeleteProduct", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct
func (_mr *MockSearchControllerMockRecorder) DeleteProduct(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DeleteProduct", reflect.TypeOf((*MockSearchController)(nil).DeleteProduct), arg0)
}

// MockSearchRepository is a mock of SearchRepository interface
type MockSearchRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSearchRepositoryMockRecorder
}

// MockSearchRepositoryMockRecorder is the mock recorder for MockSearchRepository
type MockSearchRepositoryMockRecorder struct {
	mock *MockSearchRepository
}

// NewMockSearchRepository creates a new mock instance
func NewMockSearchRepository(ctrl *gomock.Controller) *MockSearchRepository {
	mock := &MockSearchRepository{ctrl: ctrl}
	mock.recorder = &MockSearchRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockSearchRepository) EXPECT() *MockSearchRepositoryMockRecorder {
	return _m.recorder
}

// Product mocks base method
func (_m *MockSearchRepository) Product(id string) (*model.Product, error) {
	ret := _m.ctrl.Call(_m, "Product", id)
	ret0, _ := ret[0].(*model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Product indicates an expected call of Product
func (_mr *MockSearchRepositoryMockRecorder) Product(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Product", reflect.TypeOf((*MockSearchRepository)(nil).Product), arg0)
}

// Products mocks base method
func (_m *MockSearchRepository) Products(s *scope.Scope) ([]*model.Product, int, error) {
	ret := _m.ctrl.Call(_m, "Products", s)
	ret0, _ := ret[0].([]*model.Product)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Products indicates an expected call of Products
func (_mr *MockSearchRepositoryMockRecorder) Products(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Products", reflect.TypeOf((*MockSearchRepository)(nil).Products), arg0)
}

// Create mocks base method
func (_m *MockSearchRepository) Create(p *model.Product) (string, error) {
	ret := _m.ctrl.Call(_m, "Create", p)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (_mr *MockSearchRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Create", reflect.TypeOf((*MockSearchRepository)(nil).Create), arg0)
}

// Delete mocks base method
func (_m *MockSearchRepository) Delete(id string) error {
	ret := _m.ctrl.Call(_m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (_mr *MockSearchRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Delete", reflect.TypeOf((*MockSearchRepository)(nil).Delete), arg0)
}
