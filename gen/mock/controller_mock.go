// Code generated by MockGen. DO NOT EDIT.
// Source: controller/controller.go

package mock

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/pejovski/search/model"
	scope "github.com/pejovski/search/pkg/scope"
	reflect "reflect"
)

// MockController is a mock of Controller interface
type MockController struct {
	ctrl     *gomock.Controller
	recorder *MockControllerMockRecorder
}

// MockControllerMockRecorder is the mock recorder for MockController
type MockControllerMockRecorder struct {
	mock *MockController
}

// NewMockController creates a new mock instance
func NewMockController(ctrl *gomock.Controller) *MockController {
	mock := &MockController{ctrl: ctrl}
	mock.recorder = &MockControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockController) EXPECT() *MockControllerMockRecorder {
	return _m.recorder
}

// GetProduct mocks base method
func (_m *MockController) GetProduct(id string) (*model.Product, error) {
	ret := _m.ctrl.Call(_m, "GetProduct", id)
	ret0, _ := ret[0].(*model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct
func (_mr *MockControllerMockRecorder) GetProduct(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetProduct", reflect.TypeOf((*MockController)(nil).GetProduct), arg0)
}

// GetProducts mocks base method
func (_m *MockController) GetProducts(s *scope.Scope) ([]*model.Product, int, error) {
	ret := _m.ctrl.Call(_m, "GetProducts", s)
	ret0, _ := ret[0].([]*model.Product)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProducts indicates an expected call of GetProducts
func (_mr *MockControllerMockRecorder) GetProducts(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetProducts", reflect.TypeOf((*MockController)(nil).GetProducts), arg0)
}

// CreateProduct mocks base method
func (_m *MockController) CreateProduct(p *model.Product) (string, error) {
	ret := _m.ctrl.Call(_m, "CreateProduct", p)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct
func (_mr *MockControllerMockRecorder) CreateProduct(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CreateProduct", reflect.TypeOf((*MockController)(nil).CreateProduct), arg0)
}

// DeleteProduct mocks base method
func (_m *MockController) DeleteProduct(id string) error {
	ret := _m.ctrl.Call(_m, "DeleteProduct", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct
func (_mr *MockControllerMockRecorder) DeleteProduct(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DeleteProduct", reflect.TypeOf((*MockController)(nil).DeleteProduct), arg0)
}
