openapi: 3.0.0
info:
  description: Search API Swagger UI
  title: Search API Swagger UI
  version: 1.0.0
tags:
  - name: search
    description: search
security:
  - APIKeyHeader: []
paths:
  /products:
    get:
      summary: Get a of products based on a full text search query
      tags:
        - search
      description: ""
      parameters:
        - $ref: "#/components/parameters/searchQuery"
        - $ref: "#/components/parameters/brand"
        - $ref: "#/components/parameters/price"
        - $ref: "#/components/parameters/offset"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/sort"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Products"
        "400":
          description: Bad Request
        "401":
          $ref: "#/components/responses/unauthorizedError"
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
    post:
      tags:
        - search
      summary: Create product
      operationId: product-post
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                brand:
                  type: string
                price:
                  type: number
                stock:
                  type: number
        description: product
        required: true
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
        "401":
          $ref: "#/components/responses/unauthorizedError"
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
  "/products/{id}":
    get:
      tags:
        - search
      summary: Get product
      operationId: product-get
      parameters:
        - name: id
          description: product id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/product"
        "400":
          description: Bad Request
        "401":
          $ref: "#/components/responses/unauthorizedError"
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
    delete:
      tags:
        - search
      summary: Delete product
      operationId: product-delete
      parameters:
        - name: id
          description: product id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          $ref: "#/components/responses/unauthorizedError"
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
servers:
  - url: /v1
components:
  parameters:
    searchQuery:
      name: q
      description: Full text search query
      required: true
      in: query
      schema:
        type: string
    brand:
      name: brand
      description: "brand filter (e.g: ?brand=adidas)"
      in: query
      schema:
        type: string
    price:
      name: price
      description: "price filter (e.g: ?price=200-300, price=200-, price=-300)"
      in: query
      schema:
        type: string
    offset:
      name: offset
      description: "Zero based index of first item to fetch (default: 0)"
      in: query
      schema:
        type: integer
        minimum: 0
    limit:
      name: limit
      description: "Amount of items to fetch (default: 10)"
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 500
    sort:
      name: sort
      description: Sorting criteria of a collection. Should be in format {key}-{order} as
        described below. If no order is provided, ascending is used as default.
      in: query
      schema:
        type: string
        enum:
          - price-asc
          - price-desc
        default: price-asc
  responses:
    product:
      description: Ok
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Product"
    products:
      description: Ok
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Product"
    unauthorizedError:
      description: API key is missing or invalid
      headers:
        WWW_Authenticate:
          schema:
            type: string
  securitySchemes:
    APIKeyHeader:
      type: apiKey
      in: header
      name: X-API-Key
  schemas:
    Products:
      type: object
      properties:
        offset:
          $ref: "#/components/schemas/Offset"
        limit:
          $ref: "#/components/schemas/Limit"
        count:
          $ref: "#/components/schemas/Count"
        total:
          $ref: "#/components/schemas/Total"
        items:
          type: array
          items:
            $ref: "#/components/schemas/Product"
      required:
        - offset
        - limit
        - count
        - total
        - items
    Product:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        brand:
          type: string
        price:
          type: number
        stock:
          type: number
      required:
        - id
        - title
        - brand
        - price
        - stock
    Offset:
      type: integer
      description: Zero indexed position for first item of page
    Limit:
      type: integer
      description: Max number of items returned in current page
    Total:
      type: integer
      description: Total count of items across all pages
    Count:
      type: integer
      description: Current count of items returned